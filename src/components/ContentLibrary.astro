<!-- src/components/ContentLibrary.astro -->
<nav class="content-library md:sticky md:top-0">
  <h3 class="text-xl font-bold mb-2">Contents</h3>
  <ul id="toc-list"></ul>
</nav>

<script is:inline>
  // Use the load event to ensure that all content (including Markdown) is rendered
  window.addEventListener("load", function () {
    const tocList = document.getElementById("toc-list");
    // Query for all headings (h1, h2, h3) inside the blog content container
    const headings = document.querySelectorAll("#blog-content h1, #blog-content h2, #blog-content h3");
    if (!tocList || headings.length === 0) {
      console.log("No headings found in #blog-content for TOC");
      return;
    }

    // Clear any existing TOC content
    tocList.innerHTML = "";

    // Build the TOC links from the headings
    headings.forEach((heading, index) => {
      let id = heading.id;
      if (!id) {
        id = `section-${index + 1}`;
        heading.id = id;
      }
      const link = document.createElement("a");
      link.href = `#${id}`;
      link.textContent = heading.textContent;
      // Set the link text to black and use a hover background
      link.className = "block py-2 px-4 text-black hover:bg-gray-200";

      const listItem = document.createElement("li");
      listItem.appendChild(link);
      tocList.appendChild(listItem);
    });

    // Get all generated TOC links
    const navLinks = document.querySelectorAll(".content-library a");

    // Function to highlight the heading closest to the top of the viewport
    function highlightSection() {
      let currentIndex = 0;
      let minDistance = Infinity;
      headings.forEach((heading, index) => {
        const rect = heading.getBoundingClientRect();
        const distance = Math.abs(rect.top);
        // Only consider headings that are visible (or nearly so)
        if (rect.top <= window.innerHeight && distance < minDistance) {
          minDistance = distance;
          currentIndex = index;
        }
      });

      // Remove active class from all links
      navLinks.forEach(link => link.classList.remove("active-section"));
      // Add active class to the link corresponding to the closest heading
      if (navLinks[currentIndex]) {
        navLinks[currentIndex].classList.add("active-section");
      }
    }

    // Listen for scroll events to update highlighting
    window.addEventListener("scroll", highlightSection);
    // Run on initial load
    highlightSection();
  });
</script>
